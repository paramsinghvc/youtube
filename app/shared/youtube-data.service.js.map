{"version":3,"file":"youtube-data.service.js","sourceRoot":"","sources":["../../src/app/shared/youtube-data.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,qBAAyC,eAAe,CAAC,CAAA;AACzD,qBAA6B,eAAe,CAAC,CAAA;AAE7C,sBAA2B,SAAS,CAAC,CAAA;AAG1B,uBAAe,GAAW,yCAAyC,CAAC;AACpE,uBAAe,GAAW,8CAA8C,CAAC;AAGpF;IAEE,4BAA6C,MAAe,EAAmC,MAAe,EAAS,IAAW;QAArF,WAAM,GAAN,MAAM,CAAS;QAAmC,WAAM,GAAN,MAAM,CAAS;QAAS,SAAI,GAAJ,IAAI,CAAO;IAAG,CAAC;IAEtI,mCAAM,GAAN,UAAO,CAAU;QAElB,IAAI,KAAK,GAAW,CAAC,QAAK,CAAC,CAAE;YAC1B,UAAO,IAAI,CAAC,MAAM,CAAE;YACpB,cAAc;YACd,YAAY;YACZ,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE9B,IAAI,QAAQ,GAAM,IAAI,CAAC,MAAM,SAAI,KAAO,CAAC;QAEvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;aAC5B,GAAG,CAAC,UAAC,GAAc;YACnB,MAAM,CAAO,GAAG,CAAC,IAAI,EAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;gBACxC,MAAM,CAAC,IAAI,oBAAY,CAAC;oBACvB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO;oBACnB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;oBACzB,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;oBACrC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG;iBAC9C,CAAC,CAAC;YACH,CAAC,CAAC,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IA1BH;QAAC,iBAAU,EAAE;mBAGE,aAAM,CAAC,uBAAe,CAAC;mBAA2B,aAAM,CAAC,uBAAe,CAAC;;0BAH3E;IA2Bb,yBAAC;AAAD,CAAC,AA1BD,IA0BC;AA1BY,0BAAkB,qBA0B9B,CAAA;AAEU,qCAA6B,GAAgB;IACvD,WAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC;IACpD,WAAI,CAAC,uBAAe,CAAC,CAAC,OAAO,CAAC,uBAAe,CAAC;IAC9C,WAAI,CAAC,uBAAe,CAAC,CAAC,OAAO,CAAC,uBAAe,CAAC;CAC9C,CAAA","sourcesContent":["import { Injectable, bind, Inject } from '@angular/core';\nimport {Http, Response} from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport {SearchResult} from './index';\n\n\nexport var YOUTUBE_API_KEY: string = 'AIzaSyBiad0BKYHjoLLCj5FDxhuUrWdyLA2SrS8';\nexport var YOUTUBE_API_URL: string = 'https://www.googleapis.com/youtube/v3/search';\n\n@Injectable()\nexport class YoutubeDataService {\n\n  constructor(@Inject(YOUTUBE_API_KEY) private apiKey : string, @Inject(YOUTUBE_API_URL) private apiUrl : string, public http : Http) {}\n\n  search(q : string) : Observable<SearchResult[]> {\n\t\n\tlet query: string = [`q=${q}`,\n\t\t  `key=${this.apiKey}`,\n\t\t  `part=snippet`,\n\t\t  `type=video`,\n\t\t  `maxResults=10`].join('&');\n\n\tlet queryUrl = `${this.apiUrl}?${query}`;\t  \n\n  \treturn this.http.get(queryUrl)\n  \t\t.map((res : Response) => {\n  \t\t\treturn (<any>res.json()).items.map((item) => {\n\t\t\t\t\treturn new SearchResult({\n\t\t\t\t\t\tid: item.id.videoId,\n\t\t\t\t\t\ttitle: item.snippet.title,\n\t\t\t\t\t\tdescription: item.snippet.description,\n\t\t\t\t\t\tthumbnailUrl: item.snippet.thumbnails.high.url\n\t\t\t\t\t});\n  \t\t\t})\n  \t\t})\n  }\n}\n\nexport var youtubeDataServiceInjectables : Array<any> = [\n\tbind(YoutubeDataService).toClass(YoutubeDataService),\n\tbind(YOUTUBE_API_KEY).toValue(YOUTUBE_API_KEY),\n\tbind(YOUTUBE_API_URL).toValue(YOUTUBE_API_URL)\n]"]}